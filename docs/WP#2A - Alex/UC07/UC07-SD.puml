@startuml
'https://plantuml.com/sequence-diagram
autoactivate on
autonumber


actor "New Costumer" as Ac
participant ":SubscriptionsController" as Ctrl
participant ":SubscriptionsService" as Serv
participant ":PlansRepository" as PlanRepo
participant ":UserRepository" as UserRepo
participant ":SubscriptionsRepository" as SubRepo
participant ":CreateSubscriptionsMapper" as Mapper
Ac -> Ctrl : POST /subscriptions/create
Ctrl -> Serv : subscriptions = create(CreateSubscriptionsRequest resource)
Serv -> PlanRepo :Plans plan = plansRepository.findByActive_ActiveAndName_Name(true, resource.getName())
PlanRepo --> Serv : plans
note right
  This retrieves the information of the logged
  in user from the repository.
  if the user is trying to subscribe to
  a plan with a name that does not exist
  the code will end here and throw a
  EntityNotFoundException
end note

Serv -> UserRepo :User user = userRepository.findById(Long.valueOf(newString))
UserRepo --> Serv : user

note right
  if the user
  who is trying to subscribe
  is does not exist in the system
  the code will
  end here and throw
  a UsernameNotFoundException
end note

Serv -> SubRepo :Optional <Subscriptions> existingSubscription = repository.findByUser(user)
SubRepo --> Serv : subscriptions

note right
  if the user
  who is trying to subscribe
  already has a subscription,
  the code will
  end here and throw
  a IllegalArgumentException
end note

Serv -> Mapper :Subscriptions obj = createSubscriptionsMapper.create(user, plan, resource);
Mapper --> Serv: obj
Serv -> SubRepo: save(obj)
SubRepo --> Serv: obj
Serv --> Ctrl: obj


note left
 The controller here also
 creates an ResponseEntity
 to show the user the obj with
 "subscriptionsViewMapper" as objView
end note
Ac <-- Ctrl : objView

@enduml

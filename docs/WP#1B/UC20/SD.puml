@startuml
autonumber
autoactivate on

actor "Marketing Director" as Ac
participant ":PlanController" as Ctrl
participant ":PlansService" as Serv
participant ":PlansRepository" as Repo
participant ":Plans" as Plan
participant ":PromotionResult" as Result
participant ":PromotionResultView" as ResultView
participant ":PlansViewMapper" as View

activate Ac

Ac -> Ctrl : PATCH /plans/promote?name=

Ctrl -> Serv : PromotionResult promote(name, getVersionFromIfMatchHeader(ifMatchValue))

Serv -> Repo : Plans plan = findByName_Name(name)
Repo --> Serv : plan
note right
    3. Finds a plan by its name
    If it doesn't exist, it throws NotFoundException
end note

Serv -> Plan : plan.promote(desiredVersion)
Plan --> Serv : Updated plan
Serv -> Repo : repository.save(plan)
Repo --> Serv : Saved plan
Serv -> PromotionResult : result.setNewPromotedPlan(savedPlan)
PromotionResult --> Serv : updated result

Serv -> Repo : Optional<Plans> existingPlan = repository.findByPromoted_Promoted(true)
Repo --> Serv : existingPlan
note right
    8. Checks if another plan is already promoted
    If it exists, set its promotion to false
end note

Serv -> Repo : repository.save(existingPromotedPlan)
Repo --> Serv : Saved existingPromotedPlan
Serv -> PromotionResult : result.setPreviousPromotedPlan(savedExistingPromotedPlan)
PromotionResult --> Serv : updated result

Serv --> Ctrl : result

Ctrl -> View : plansViewMapper.toPlansView(result.getNewPromotedPlan())
View --> Ctrl : newPromotedPlanView
Ctrl -> View : plansViewMapper.toPlansView(result.getPreviousPromotedPlan())
View --> Ctrl : previousPromotedPlanView

Ctrl -> ResultView : resultView.setNewPromotedPlan(newPromotedPlanView)
ResultView --> Ctrl : updated resultView
Ctrl -> ResultView : resultView.setPreviousPromotedPlan(previousPromotedPlanView)
ResultView --> Ctrl : updated resultView

Ctrl --> Ac : resultView

@enduml

@startuml
'https://plantuml.com/sequence-diagram
autoactivate on
autonumber


actor "Marketing director" as Ac
participant ":SubscriptionsController" as Ctrl
participant ":SubscriptionsService" as Serv
participant ":PlansRepository" as PlanRepo
participant ":SubscriptionsRepository" as SubRepo
participant ":Subscriptions" as Sub


Ac -> Ctrl : PATCH /subscriptions/change/{actualPlan}/{newPlan}
Ctrl -> Serv : subscriptions = migrateAllToPlan(long desiredVersion,String actualPlan, String newPlan)

Serv -> Serv : if(actualPlan.equals(newPlan))

note right
  if the user who is trying to migrate
  all users to their acutal plan,
  the code will
  end here and throw
  a DuplicateRequestException
end note

Serv --> Serv :

Serv -> PlanRepo :Plans plan_old = plansRepository.findByActive_ActiveAndName_Name(true, actualPlan)
PlanRepo --> Serv : plan_old

Serv -> PlanRepo :Plans plan_new = plansRepository.findByActive_ActiveAndName_Name(true, newPlan)
PlanRepo --> Serv : plan_new

note right
  Both of this actions check the existence of the
  specified plan int the repository.
  if the user is trying to change from or to
  a plan with a name that does not exist
  the code will end here and throw a
  EntityNotFoundException
end note




Serv -> SubRepo :List<Subscriptions> subs = repository.findAllByPlanAndActiveStatus_Active(plan_old, true)
SubRepo --> Serv : subs

note right
  if this list is empty, it means
  that does not exist users subscribed
  to the plan so the code will
  end here and throw  a UsernameNotFoundException
end note



loop this will change all users from their actual plan to their new plan

deactivate Sub
Serv -> Sub : subscription.changePlan(desiredVersion, plan_new)

deactivate SubRepo
Serv -> SubRepo: save(obj)
end loop


Serv --> Ctrl


note left
 The controller here also
 creates an ResponseEntity
 to show the user the obj with
 "subscriptionsViewMapper" as objView
end note
Ac <-- Ctrl : objView

@enduml

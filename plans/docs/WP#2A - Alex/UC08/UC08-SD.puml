@startuml
'https://plantuml.com/sequence-diagram
autoactivate on
autonumber


actor "Subscriber" as Ac
participant ":SubscriptionsController" as Ctrl
participant ":SubscriptionsService" as Serv
participant ":UserRepository" as UserRepo
participant ":SubscriptionsRepository" as SubRepo
participant ":Subscriptions" as Sub

Ac -> Ctrl : PATCH /subscriptions/
Ctrl -> Serv : Subscriptions subscriptions = cancelSubscription(long desiredVersion)

Serv -> UserRepo :User user = userRepository.findById(Long.valueOf(newString))
UserRepo --> Serv : user

note right
  This retrieves the information of the logged
  in user from the repository.
  If the user who is trying to cancel a subscription
  does not exist in the system  the code will
  end here and throw a EntityNotFoundException
end note

Serv -> SubRepo :Subscriptions subscription = repository.findByUser(user)
SubRepo --> Serv : subscription

note right
  if the user is trying to cancel
  a subscription does not have an active
  subscription the code will
  end here and throw
  a EntityNotFoundException
end note

note left
  if it does have a subscription it
  will check if the subscription is
  already canceled or not.
  if the subscription is already canceled
  it will throw EntityNotFoundException
end note

deactivate Sub
Serv -> Sub : subscription.deactivate(desiredVersion)


Serv -> SubRepo: save(obj)
SubRepo --> Serv: subscription
Serv --> Ctrl: subscription


note left
 The controller here also
creates an ResponseEntity
 to show the user the obj with
 "subscriptionsViewMapper"
 as subscriptionView
end note
Ac <-- Ctrl : subscriptionView

@enduml

@startuml
'https://plantuml.com/sequence-diagram
autoactivate on
autonumber


actor "Subscriber" as Ac
participant ":SubscriptionsController" as Ctrl
participant ":SubscriptionsService" as Serv
participant ":SubscriptionsRepository" as SubRepo
participant ":Subscriptions" as Sub

Ac -> Ctrl : PATCH /subscriptions/
Ctrl -> Serv : Subscriptions subscriptions = cancelSubscription(long desiredVersion, String auth)


Serv -> SubRepo : Subscriptions cancelSub(String username,String auth,long desiredVersion)

note right
  This retrieves the information of the logged
  in user from the repository.
  If the user who is trying to cancel a subscription
  does not exist in the system  the code will
  end here and throw a EntityNotFoundException
end note
SubRepo -> SubRepo :User findById(Long.valueOf(newString))
SubRepo --> SubRepo : user


alt A - will check if user´s subscription exist locally
SubRepo -> SubRepo :Subscriptions findByActiveStatus_ActiveAndUser(user)
SubRepo --> SubRepo : subscription
end
alt B - will check if user´s subscription exist not locally
SubRepo -> SubRepo :Subscriptions getSubsFromOtherApi(newString, auth)
SubRepo --> SubRepo : subscription
end
note right
  if the user is trying to cancel
  a subscription does not have an active
  subscription the code will
  end here and throw
  a EntityNotFoundException
end note

deactivate Sub
SubRepo -> subscription : deactivate(desiredVersion)
subscription-->SubRepo: subscription
SubRepo --> Serv: subscription

Serv -> SubRepo: save(subscription)
SubRepo --> Serv: subscription
Serv --> Ctrl: subscription


note left
 The controller here also
creates an ResponseEntity
 to show the user the obj with
 "subscriptionsViewMapper"
 as subscriptionView
end note
Ac <-- Ctrl : subscriptionView

@enduml

@startuml
'https://plantuml.com/sequence-diagram
autoactivate on
autonumber


actor "Subscriber" as Ac
participant ":SubscriptionsController" as Ctrl
participant ":SubscriptionsService" as Serv
participant ":UserRepository" as UserRepo
participant ":SubscriptionsRepository" as SubRepo
participant ":Subscriptions" as Sub


Ac -> Ctrl : PATCH /subscriptions/renew
Ctrl -> Serv : subscriptions = renewAnualSubscription(long desiredVersion);

Serv -> UserRepo :User user = userRepository.findById(Long.valueOf(newString))
UserRepo --> Serv : user

note right
  if the user
  who is trying to subscribe
  is does not exist in the system
  the code will
  end here and throw
  a UsernameNotFoundException
end note

Serv -> SubRepo :Subscriptions subscription = repository.findByActiveStatus_ActiveAndUser(true, user)
SubRepo --> Serv : subscriptions


Serv -> Serv :  if (Objects.equals(subscription.getPaymentType().getPaymentType(), "monthly"))

note right
  if the user is trying to renew
  a subscription which is not annual,
  the code will
  end here and throw
  a IllegalArgumentException
end note

Serv --> Serv :



deactivate Sub
Serv -> Sub : subscription.checkChange(desiredVersion)
note right
 this will check if this operation
 is already done and avoid conflicts
end note


Serv -> SubRepo: save(subscription)
SubRepo --> Serv: subscription
Serv --> Ctrl: subscription


note left
 The controller here also
 creates an ResponseEntity
 to show the user the subscription with
 "subscriptionsViewMapper" as objView
end note
Ac <-- Ctrl : subscriptionView

@enduml

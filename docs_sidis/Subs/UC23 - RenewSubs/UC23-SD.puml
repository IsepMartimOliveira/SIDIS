@startuml
'https://plantuml.com/sequence-diagram
autoactivate on
autonumber


actor "Subscriber" as Ac
participant ":SubscriptionsController" as Ctrl
participant ":SubscriptionsService" as Serv
participant ":SubscriptionsRepository" as SubRepo
participant ":Subscriptions" as Sub


Ac -> Ctrl : PATCH /subscriptions/renew
Ctrl -> Serv : subscriptions = renewAnualSubscription(long desiredVersion,String auth);
Serv -> SubRepo:Subscriptions obj = subscriptionsRepository.renewSub(newString,auth,desiredVersion)

SubRepo --> SubRepo: HttpResponse<String> user = getUserFromOtherAPI(newString);
alt user exist
    SubRepo --> SubRepo:Optional<Subscriptions> subscription = findByActiveStatus_ActiveAndUser(true, newString);
        alt subscription exist locally
         SubRepo --> Sub:  subscription.checkChange(desiredVersion)
         SubRepo --> Sub:  getEndDate().setEndDate(String.valueOf(endDate.plusYears(1)));
         else subscription exist not locally
         SubRepo --> SubRepo: getSubsFromOtherApi(newString, auth)
         SubRepo --> SubRepo:throw  IllegalArgumentException
        end

end

note right
  if the user is trying to renew
  a subscription which is not annual,
  the code will
  end here and throw
  a IllegalArgumentException

end note

SubRepo --> Serv: subscription

Serv -> SubRepo: save(subscription)
SubRepo --> Serv: subscription
Serv --> Ctrl: subscription


note left
 The controller here also
 creates an ResponseEntity
 to show the user the subscription with
 "subscriptionsViewMapper" as objView
end note
Ac <-- Ctrl : subscriptionView

@enduml

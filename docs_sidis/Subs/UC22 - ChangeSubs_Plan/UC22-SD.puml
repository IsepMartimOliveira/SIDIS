@startuml
'https://plantuml.com/sequence-diagram
autoactivate on
autonumber


actor "Subscriber" as Ac
participant ":SubscriptionsController" as Ctrl
participant ":SubscriptionsService" as Serv

participant ":SubscriptionsRepository" as SubRepo
participant ":DeviceRepository" as DevRepo
participant ":Subscriptions" as Sub


Ac -> Ctrl : PATCH /subscriptions/change/{name}
Ctrl -> Serv : subscriptions = (long desiredVersion, String name, String auth)
Serv -> SubRepo : Subscriptions changePlan(newString,auth,name,desiredVersion);


SubRepo --> SubRepo: HttpResponse<String> user = getUserFromOtherAPI(newString);
note left
if user does not exist will
throw IllegalArgumentException
end note
SubRepo --> SubRepo: Subscriptions sub = findByActiveStatus_ActiveAndUser(true,username)
note left
if sub does does not exist locally will
check other machine
end note
alt change locally
SubRepo --> SubRepo: HttpResponse<String> plan = getPlansFromOtherAPI(name);
SubRepo --> SubRepo: HttpResponse<String> plan2 = getPlansFromOtherAPI(subscription.getPlan());
SubRepo --> SubRepo : if(subscription.getPlan().getName().getName().equals(name))
SubRepo --> Sub:changePlan(desiredVersion, jsonArray.getString("name"))
SubRepo --> Serv :sub
end alt

alt change not locally
SubRepo --> SubRepo: HttpResponse<String> existingSubscription2 = getSubsFromOtherApi(newString, auth)
SubRepo --> Serv :sub
end alt
deactivate Sub

Serv -> SubRepo: save(sub)
SubRepo --> Serv: subscription
Serv --> Ctrl: subscription


note left
 The controller here also
 creates an ResponseEntity
 to show the user the subscription with
 "subscriptionsViewMapper" as objView
end note
Ac <-- Ctrl : subscriptionView

@enduml

Alternativa:
Considerando a necessidade de otimizar recursos, uma alternativa seria consolidar as bases de dados dos Commands,
    permitindo que compartilhem o mesmo base de dados. Isso permite optimizar o uso dos recursos, sendo que não ocorre duplicações.
No entanto, é importante salientar que, ao optar por essa abordagem, existe o risco potencial de um problema na base de dados afetar todos os serviços associados. Caso ocorram problemas, como falhas de conexão ou interrupções na base de dados, todos os serviços podem ser impactados simultaneamente, resultando em uma queda geral do sistema.
Essa decisão envolve um equilíbrio delicado entre otimização de recursos e a mitigação de riscos.
Recomenda-se uma análise cuidadosa dos requisitos do sistema
    e a implementação de medidas de segurança robustas para lidar com possíveis falhas na base de dados, minimizando assim os impactos negativos no serviço.


Alternativa para gestão das Subscriptions:

Utilizamos o RabbitMQ para verificar a existência do plano ao criar uma assinatura, também para exibir os detalhes do plano e, por fim, para alterar a assinatura do plano.
Diante dessa situação, surge uma alternativa: armazenar o plano em memória, reduzindo assim o número de solicitações e utilizando menos recursos da máquina.

Embora haja pontos positivos nesta abordagem, alguns pontos negativos se destacam. Por exemplo, se a instância da assinatura falhar, a criação dos planos não os armazenará
na memória. Isso ocorre porque a persistência ocorre por meio de eventos, ou seja, quando o RabbitMQ envia a mensagem "plans_created", os planos são registrados. No entanto,
essa estratégia falha quando a subscrição e suas instâncias não estão operacionais no momento do evento.
